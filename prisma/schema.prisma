// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  feedback      Feedback[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String         @id @default(cuid())
  name        String
  date        DateTime
  fileUrl     String?
  fileType    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings    MetricReading[]
}

model HealthMetric {
  id          String         @id @default(cuid())
  name        String
  unit        String
  minValue    Float?
  maxValue    Float?
  description String?        @db.Text
  category    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  readings    MetricReading[]
}

model MetricReading {
  id            String       @id @default(cuid())
  value         Float
  status        String       // normal, low, high, critical
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  reportId      String
  report        Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  metricId      String
  metric        HealthMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
}

model Feedback {
  id          String   @id @default(cuid())
  message     String   @db.Text
  category    String   // Analysis, UI/UX, Feature Request, Bug
  status      String   // New, In Progress, Completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemPrompt {
  id          String   @id @default(cuid())
  name        String
  content     String   @db.Text
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApiUsage {
  id          String   @id @default(cuid())
  endpoint    String
  duration    Int      // in milliseconds
  status      String   // success, error
  errorMessage String? @db.Text
  createdAt   DateTime @default(now())
  userId      String?
}

model GeminiConfig {
  id        String   @id @default(cuid())
  apiKey    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
